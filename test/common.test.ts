import fs from 'fs';
import { describe, expect, it } from 'vitest';

import { emit } from './test-host.js';

describe('common', () => {
  it('emit directory/addressbook.proto with package directory.addressbook', async () => {
    const results = await emit(`
    @package({
      name: "directory.addressbook",
    })
    namespace AddressBook;
    @Protobuf.service interface AddressBook {
      Get(): WellKnown.Empty;
    }`);
    expect(results['directory/addressbook.proto']).match(/package directory\.addressbook/);
  });
  it('emit without google api proto files', async () => {
    const results = await emit(`
    @package({
      name: "addressbook",
    })
    namespace AddressBook;
    @Protobuf.service interface AddressBook {
      Get(): WellKnown.Empty;
    }`);
    expect(results['google/api/http.proto']).toBeUndefined();
  });
  it('emit with google.api.http option', async () => {
    const results = await emit(`
    @TypeSpec.service(#{
      title: "Address Book",
    })
    @package({
      name: "addressbook",
    })
    namespace AddressBookNamespace;

    @Protobuf.service interface AddressBook {
      @get @route("book") Get(): WellKnown.Empty;
    }`);
    expect(results['google/api/http.proto']).toBeDefined();
    expect(results['google/api/http.proto']).toEqual(
      `// Generated by Microsoft TypeSpec\n` +
        fs.readFileSync(__dirname + '/../google/api/http.proto', { encoding: 'utf-8' }),
    );
    expect(results['google/api/annotations.proto']).toBeDefined();
    expect(results['google/api/annotations.proto']).toEqual(
      `// Generated by Microsoft TypeSpec\n` +
        fs.readFileSync(__dirname + '/../google/api/annotations.proto', { encoding: 'utf-8' }),
    );
  });
  it(`emit with multiple body not allowed`, async () => {
    const results = await emit(`
    @TypeSpec.service(#{
      title: "Address Book",
    })
    @package({
      name: "addressbook",
    })
    namespace AddressBookNamespace;

    model Book {
      @field(1) id: string;
      @field(2) author: Author;
      @field(3) publisher: Publisher;
    }

    model Author {
      @field(1) id: string;
      @field(2) name: string;
    }

    model Publisher {
      @field(1) id: string;
      @field(2) name: string;
    }

    @Protobuf.service interface AddressBook {
      @post @route("book/{id}") Edit(...Book): Book;
    }`);
    expect(results['google/api/http.proto']).toBeUndefined();
    expect(results['google/api/annotations.proto']).toBeUndefined();
    expect(results['addressbook.proto']).not.toMatch(/option \(google.api.http\)/);
  });
});
